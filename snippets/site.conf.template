server {
    listen 80;
    listen [::]:80;

    server_name ${SERVER_NAME};

    # for non docker setup
    # access_log      /var/log/nginx/${SERVER_NAME}-access.log main buffer=512k flush=1s;
    # error_log       /var/log/nginx/${SERVER_NAME}-error.log error;

    location /.well-known/acme-challenge {
        root /var/www/letsencrypt;
        try_files $uri $uri/ =404;
    }

    location / {
        return 301 https://${SERVER_NAME}$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name ${SERVER_NAME};

    # for non docker setup
    # access_log      /var/log/nginx/${SERVER_NAME}-access.log main buffer=512k flush=1s;
    # error_log       /var/log/nginx/${SERVER_NAME}-error.log error;

    root /var/www/${SERVER_NAME}/public;

    # let's encrypt cert
    ssl_certificate         /etc/letsencrypt/live/${SERVER_NAME}/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/${SERVER_NAME}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${SERVER_NAME}/fullchain.pem;

    # ssl_certificate         /etc/ssl/certs/${SERVER_DOMAIN}.crt;
    # ssl_certificate_key     /etc/ssl/private/${SERVER_DOMAIN}.key;

    # corps hack
    # it should be configured per site with templating
    # include corps.include;

    # referer protection
    # it should be configured per site with templating
    # include referer.include;

    # location ~* \.(js|css|png|jpg|jpeg|gif|ico|swf|eot|ttf|otf|woff|woff2)$
    include snippets/static_location.include;

    location /backend {
        proxy_pass http://127.0.0.1:8080;
        include snippets/proxy.include;
    }

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        fastcgi_pass 127.0.0.1:9000;
        include snippets/fastcgi.include;
    }

    # location ~ (/\.|^/protected)
    include snippets/protected_locations.include;

}
